<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on Narain</title>
    <link>//localhost:1313/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on Narain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Jun 2024 01:10:00 -0700</lastBuildDate><atom:link href="//localhost:1313/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Training 2 (FSDP)</title>
      <link>//localhost:1313/posts/torchdistributed2/</link>
      <pubDate>Thu, 20 Jun 2024 01:10:00 -0700</pubDate>
      
      <guid>//localhost:1313/posts/torchdistributed2/</guid>
      <description>In the ever-evolving landscape of artificial intelligence and machine learning, the demand for training larger and more complex models continues to grow. Traditional techniques such as data parallelism, model parallelism, and tensor parallelism have played crucial roles in enabling this growth by distributing the training workload across multiple GPUs and machines. These methods are foundational in making large-scale training feasible by addressing issues related to computation and memory distribution.
Memory Consumption in Neural Networks: Where Did All the Memory Go?</description>
      <content>&lt;p&gt;In the ever-evolving landscape of artificial intelligence and machine learning, the
demand for training larger and more complex models continues to grow. Traditional
techniques such as data parallelism, model parallelism, and tensor parallelism have
played crucial roles in enabling this growth by distributing the training workload
across multiple GPUs and machines. These methods are foundational in making large-scale
training feasible by addressing issues related to computation and memory distribution.&lt;/p&gt;
&lt;h2 id=&#34;memory-consumption-in-neural-networks-where-did-all-the-memory-go&#34;&gt;Memory Consumption in Neural Networks: Where Did All the Memory Go?&lt;/h2&gt;
&lt;p&gt;When training large neural network models like GPT-2, understanding memory consumption
is crucial. Let&amp;rsquo;s breakdown where all the memory goes and how different techniques can help
manage it more efficiently.&lt;/p&gt;
&lt;h3 id=&#34;model-weights&#34;&gt;Model Weights&lt;/h3&gt;
&lt;p&gt;The essential parameter for any neural network it the weights required to compute the
forward pass. Model weights can be stored in multiple formats including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;single precision (fp32)&lt;/strong&gt;: Typically used for high accuracy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;half precision&lt;/strong&gt;: Used to reduce memory consumption and computational cost&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;model-inference&#34;&gt;Model Inference&lt;/h3&gt;
&lt;p&gt;During inference, the memory consumption is primarily due to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model memory&lt;/strong&gt;: The storage required for model weights.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Activation memory&lt;/strong&gt;: The intermediate values computed during the forward pass.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;model-training&#34;&gt;Model training&lt;/h3&gt;
&lt;p&gt;Training a model involves additional memory overhead due to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gradient Memory&lt;/strong&gt;: storage for gradients computed during backpropagation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimizer memory&lt;/strong&gt;: The intermediate values computed during the forward pass.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;optimizer-memory-requirements&#34;&gt;Optimizer memory requirements&lt;/h3&gt;
&lt;p&gt;Different optimizers have different memory requirements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SGD (Stochastic Gradient Descent)&lt;/strong&gt;:  requires no additional memory beyond model weights.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SGD with momentum&lt;/strong&gt;: Requires additional memory equal to the size of the weights.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adam&lt;/strong&gt;: Requires twice the memory of the weights (for maintaining both the moment estimates).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;techniques-for-reducing-memory-usage&#34;&gt;Techniques for reducing Memory usage.&lt;/h3&gt;
&lt;p&gt;To mitigate high memory consumptioon, several techniques can be employed.&lt;/p&gt;
&lt;h4 id=&#34;activation-recomputation&#34;&gt;Activation Recomputation&lt;/h4&gt;
&lt;p&gt;This technique involves recomputing activations during the backward pass instead of saving them in memory.
It can significantly reduce activation memory usage, although it may increase computational cost.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Activation Recomputation in Linear Layer&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import torch
from torch.autograd import Function

class LinearFunction(Function):
    @staticmethod
    def forward(ctx, input, weight, bias=None):
        ctx.save_for_backward(input, weight)
        output = input.mm(weight.t())
        if bias is not None:
            output &amp;#43;= bias.unsqueeze(0).expand_as(output)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        input, weight = ctx.saved_tensors
        grad_input = grad_weight = grad_bias = None

        if ctx.needs_input_grad[0]:
            grad_input = grad_output.mm(weight)
        if ctx.needs_input_grad[1]:
            grad_weight = grad_output.t().mm(input)
        if bias is not None and ctx.needs_input_grad[2]:
            grad_bias = grad_output.sum(0)

        return grad_input, grad_weight, grad_bias

class Linear(torch.nn.Module):
    def __init__(self, input_features, output_features, bias=True):
        super(Linear, self).__init__()
        self.input_features = input_features
        self.output_features = output_features

        # Initialize the weight and bias parameters
        self.weight = torch.nn.Parameter(torch.Tensor(output_features, input_features))
        if bias:
            self.bias = torch.nn.Parameter(torch.Tensor(output_features))
        else:
            self.register_parameter(&amp;#39;bias&amp;#39;, None)

    def forward(self, input):
        return LinearFunction.apply(input, self.weight, self.bias)

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;parameter buffer optimizer&lt;/li&gt;
&lt;li&gt;second order statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite all the efforts we would still face out of memory issues when training a llama 70B parameter
model with a batch size of 1. Model training uses lot of memory when training with conventional
training methods where all parameters of model and optimizers are saved locally to each GPUs global
memory. When we train deep learning models we have multiple copies of the models for parameters and optimizers
gradients and optimizer features like momemntum which save past gradients weighted average. These models compute
buffer adds on to the overhead of training models efficiently. This is where DeepSpeed and its ZeRO
(Zero Redundancy Optimizer) technology come into play.&lt;/p&gt;
&lt;h2 id=&#34;special-offering-by-deepspeed-zero&#34;&gt;Special offering by deepspeed zero&lt;/h2&gt;
&lt;p&gt;At the heart of ZeRO optimizer, which addresses the limitations of traditional
data, model, and tensor parallelism techniques. ZeRO is designed to maximize memory efficiency
and scalability, enabling the training of models with hundreds of billions of parameters on existing hardware.&lt;/p&gt;

  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;//localhost:1313/images/fsdp1.png&#34;  alt=&#34;fully sharded data parallel&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;center&#34; &gt;fully sharded data parallel&lt;/figcaption&gt;
    
  &lt;/figure&gt;


&lt;p&gt;As its name suggests zero stands for zero redundancy of parameters, unlike conventional training scheme where
each GPU maintains a replica of the model. Zero ensures that the entire cluster shares a single
copy of the model. Paramters required for computation are fetched from the respective devices
using broadcast operations. This allows for data parallel operations on large batch sizes than typically
possible. followed by an all-reduce operaation back to the device responsible for that part of the weight.
This strategy of sharing weights among GPUs essentially increases the communication required but the
latency for these fetch operations can be overlapped with computation operations as most of the
deep learning operations happen in linear fashion.&lt;/p&gt;
&lt;p&gt;Zero has three different stages based on the parameters it includes in the sharding&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;zero 1 - optimizer&lt;/li&gt;
&lt;li&gt;zero 2 - gradients + optimizer&lt;/li&gt;
&lt;li&gt;zero 3 - gradients + optimizer + parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;
  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;//localhost:1313/images/fsdp2.png&#34;  alt=&#34;fully sharded data parallel&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;center&#34; &gt;fully sharded data parallel&lt;/figcaption&gt;
    
  &lt;/figure&gt;



  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;//localhost:1313/images/fsdp3.png&#34;  alt=&#34;fully sharded data parallel&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;center&#34; &gt;fully sharded data parallel&lt;/figcaption&gt;
    
  &lt;/figure&gt;



  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;//localhost:1313/images/fsdp4.png&#34;  alt=&#34;fully sharded data parallel&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;center&#34; &gt;fully sharded data parallel&lt;/figcaption&gt;
    
  &lt;/figure&gt;

&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Bert Training using zero Redundancy optimizer pytorch&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;show&#34; data-label-collapse=&#34;hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import torch
from transformers import BertForMaskedLM, BertTokenizerFast
from torch.nn.parallel import DistributedDataParallel as DDP
from torch.distributed.optim import ZeroRedundancyOptimizer

# Initialize tokenizer and model
tokenizer = BertTokenizerFast.from_pretrained(&amp;#39;bert-base-uncased&amp;#39;)
model = BertForMaskedLM.from_pretrained(&amp;#39;bert-base-uncased&amp;#39;)

# Assuming you have your dataset in the form of a list of sentences
sentences = [&amp;#34;Your sentence 1&amp;#34;, &amp;#34;Your sentence 2&amp;#34;, ...]
inputs = tokenizer(sentences, padding=True, truncation=True, return_tensors=&amp;#34;pt&amp;#34;)
labels = inputs.input_ids.detach().clone()

# Create a mask for the input ids
rand = torch.rand(labels.shape)
mask_arr = (rand &amp;lt; 0.15) * (inputs.input_ids != tokenizer.pad_token_id)
selection = []
for i in range(labels.shape[0]):
    selection.append(torch.flatten(mask_arr[i].nonzero()).tolist())
for i in range(labels.shape[0]):
    inputs.input_ids[i, selection[i]] = tokenizer.mask_token_id

# Move model and input tensors to the device
device = torch.device(&amp;#34;cuda&amp;#34; if torch.cuda.is_available() else &amp;#34;cpu&amp;#34;)
model.to(device)
inputs.input_ids = inputs.input_ids.to(device)
labels = labels.to(device)

# Initialize DDP and ZeroRedundancyOptimizer
ddp_model = DDP(model, device_ids=[torch.cuda.current_device()])
optimizer = torch.optim.AdamW(ddp_model.parameters(), lr=1e-5)
optimizer = ZeroRedundancyOptimizer(ddp_model.parameters(), optimizer)

# Training loop
for epoch in range(num_epochs):
    outputs = ddp_model(**inputs, labels=labels)
    loss = outputs.loss
    loss.backward()
    optimizer.step()
    optimizer.zero_grad()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;pytorch FSDP offers variety of sharding strategies which is determined by sharding factor F number of ranks over which parameters are
sharded by setting the sharding factor to 1&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tinkerd.net/blog/machine-learning/distributed-training/&#34;&gt;https://tinkerd.net/blog/machine-learning/distributed-training/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2304.11277&#34;&gt;PyTorch FSDP: Experiences on Scaling Fully Sharded Data Parallel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2104.07857&#34;&gt;ZeRO-Infinity: Breaking the GPU Memory Wall for Extreme Scale Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
